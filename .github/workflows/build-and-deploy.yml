name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  BACKEND_IMAGE: secure-app-backend
  FRONTEND_IMAGE: secure-app-frontend

jobs:
  sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  sca:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build backend image (for SCA)
        run: docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest ./backend

      - name: Run Trivy scan on backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Build frontend image (for SCA)
        run: docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest ./frontend

      - name: Run Trivy scan on frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [sast, sca]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_TOKEN }}

      - name: Build and push backend image
        run: |
          docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest ./backend
          docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest

      - name: Build and push frontend image
        run: |
          docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest ./frontend
          docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kustomize
        uses: kodermax/setup-kustomize@v1

      - name: Generate Dev Manifests
        run: kustomize build kubernetes/overlays/dev > manifests-dev.yaml

      - name: Generate Stage Manifests
        run: kustomize build kubernetes/overlays/stage > manifests-stage.yaml

      - name: Generate Prod Manifests
        run: kustomize build kubernetes/overlays/prod > manifests-prod.yaml

      - name: DAST Scan (Conceptual)
        run: echo "Running DAST scan against deployed application..."
        # In a real scenario, this would trigger a DAST tool (e.g., OWASP ZAP) 
        # against the deployed application in a staging environment.
        # This step would typically be part of a separate job that runs after deployment to a test environment.

      - name: Commit Kustomized Manifests (for ArgoCD)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add manifests-dev.yaml manifests-stage.yaml manifests-prod.yaml
          git commit -m "Update Kustomized manifests"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ArgoCD Sync (Conceptual)
        run: echo "ArgoCD would automatically sync from the Git repository."
        # In a real scenario, ArgoCD would be configured to monitor the Git repository
        # for changes in the generated manifests (e.g., manifests-dev.yaml, manifests-stage.yaml, manifests-prod.yaml).
        # Upon detecting changes, ArgoCD would automatically pull the new manifests and apply them to the Kubernetes cluster.
