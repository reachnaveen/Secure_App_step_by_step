name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  BACKEND_IMAGE_NAME: secure-app-backend
  FRONTEND_IMAGE_NAME: secure-app-frontend

jobs:
  sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  sca:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build backend image (for SCA)
        run: docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest ./backend

      - name: Run Trivy scan on backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Build frontend image (for SCA)
        run: docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest ./frontend

      - name: Run Trivy scan on frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [sast, sca]
    outputs:
      backend_image_tag: ${{ steps.set_image_tag.outputs.backend_image_tag }}
      frontend_image_tag: ${{ steps.set_image_tag.outputs.frontend_image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        id: set_image_tag
        run: |
          echo "backend_image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "frontend_image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_TOKEN }}

      - name: Build and push backend image
        run: |
          docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} ./backend
          docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}

      - name: Build and push frontend image
        run: |
          docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }} ./frontend
          docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}

  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    environment:
      name: dev
      url: http://dev.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kustomize
        uses: kodermax/setup-kustomize@v1

      - name: Generate Dev Manifests
        run: |
          kustomize edit set image your_docker_username/secure-app-backend=${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.build-and-push.outputs.backend_image_tag }}
          kustomize edit set image your_docker_username/secure-app-frontend=${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.build-and-push.outputs.frontend_image_tag }}
          kustomize build kubernetes/overlays/dev > manifests-dev.yaml
        working-directory: kubernetes/overlays/dev

      - name: Commit Dev Manifests (for ArgoCD)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add manifests-dev.yaml
          git commit -m "Deploy to dev: Update image tags to ${{ needs.build-and-push.outputs.backend_image_tag }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ArgoCD Sync (Conceptual)
        run: echo "ArgoCD would automatically sync from the Git repository for dev."

  deploy-stage:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-dev]
    environment:
      name: stage
      url: http://stage.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kustomize
        uses: kodermax/setup-kustomize@v1

      - name: Generate Stage Manifests
        run: |
          kustomize edit set image your_docker_username/secure-app-backend=${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.build-and-push.outputs.backend_image_tag }}
          kustomize edit set image your_docker_username/secure-app-frontend=${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.build-and-push.outputs.frontend_image_tag }}
          kustomize build kubernetes/overlays/stage > manifests-stage.yaml
        working-directory: kubernetes/overlays/stage

      - name: Commit Stage Manifests (for ArgoCD)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add manifests-stage.yaml
          git commit -m "Deploy to stage: Update image tags to ${{ needs.build-and-push.outputs.backend_image_tag }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ArgoCD Sync (Conceptual)
        run: echo "ArgoCD would automatically sync from the Git repository for stage."

  dast:
    runs-on: ubuntu-latest
    needs: [deploy-stage]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP DAST Scan
        uses: zaproxy/action@v0.10.0
        with:
          target: 'http://stage.example.com' # Replace with your actual staging environment URL
          cmd: 'zap-baseline.py -t http://stage.example.com -I -r dast_report.html' # Example: Baseline scan
          # You can customize the ZAP command based on your needs (e.g., full scan, API scan)
          # For more options, refer to OWASP ZAP documentation.

      - name: Upload DAST Report
        uses: actions/upload-artifact@v4
        with:
          name: DAST-Report
          path: dast_report.html # Adjust if your report name is different

  deploy-prod:
    runs-on: ubuntu-latest
    needs: [build-and-push, dast]
    environment:
      name: prod
      url: http://prod.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kustomize
        uses: kodermax/setup-kustomize@v1

      - name: Generate Prod Manifests
        run: |
          kustomize edit set image your_docker_username/secure-app-backend=${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.build-and-push.outputs.backend_image_tag }}
          kustomize edit set image your_docker_username/secure-app-frontend=${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.build-and-push.outputs.frontend_image_tag }}
          kustomize build kubernetes/overlays/prod > manifests-prod.yaml
        working-directory: kubernetes/overlays/prod

      - name: Commit Prod Manifests (for ArgoCD)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add manifests-prod.yaml
          git commit -m "Deploy to prod: Update image tags to ${{ needs.build-and-push.outputs.backend_image_tag }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ArgoCD Sync (Conceptual)
        run: echo "ArgoCD would automatically sync from the Git repository for prod."